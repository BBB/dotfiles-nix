{
  "string": {
    "prefix": "s",
    "body": "string"
  },
  "int": {
    "prefix": "i",
    "body": "int"
  },
  "float": {
    "prefix": "f",
    "body": "float"
  },
  "bool": {
    "prefix": "b",
    "body": "bool"
  },
  "option": {
    "prefix": "o",
    "body": "option($0)"
  },
  "j": {
    "prefix": "j",
    "body": "{j|$0|j}"
  },
  "[||]": {
    "prefix": "[",
    "body": "[| $0 |"
  },
  "->": {
    "prefix": ">",
    "body": "->$0"
  },
  "|>": {
    "prefix": ">>",
    "body": "|> $0"
  },
  "Option.getExn": {
    "prefix": "oge",
    "body": "Option.getExn"
  },
  "Option.getWithDefault": {
    "prefix": "ogwd",
    "body": "Option.getWithDefault($0)"
  },
  "Option.map": {
    "prefix": "om",
    "body": "Option.map($0)"
  },
  "Option.mapWithDefault": {
    "prefix": "omwd",
    "body": "Option.mapWithDefault($0)"
  },
  "Option.flatMap": {
    "prefix": "ofm",
    "body": "Option.flatMap($0)"
  },
  "Map.get": {
    "prefix": "mg",
    "body": "Map.get($0)"
  },
  "Map.getExn": {
    "prefix": "mge",
    "body": "Map.getExn($0)"
  },
  "Js.t {.}": {
    "prefix": "jst",
    "body": "{. $0}"
  },
  "Js.t {..}": {
    "prefix": "jsot",
    "body": "{.. $0}"
  },
  "Js.nullable": {
    "prefix": "jsn",
    "body": "Js.nullable($0)"
  },
  "Js.Nullable.toOption": {
    "prefix": "jsnto",
    "body": "Js.Nullable.toOption"
  },
  "Js.Nullable.fromOption": {
    "prefix": "jsnfo",
    "body": "Js.Nullable.fromOption"
  },
  "React": {
    "prefix": "r",
    "body": "React"
  },
  "[@react.component]": {
    "prefix": "rc",
    "body": "[@react.component]"
  },
  "make": {
    "prefix": "lm",
    "body": "let make = (${1}) => {\n  $0\n};"
  },
  "react.component.make": {
    "prefix": "rclm",
    "body": "[@react.component]\nlet make = (${1}) => {\n  $0\n};"
  },
  "[@bs.config {jsx: 3}]": {
    "prefix": "jsx",
    "body": "[@bs.config {jsx: 3}];\n"
  },
  "React.Ref.current": {
    "prefix": "rrc",
    "body": "React.Ref.current"
  },
  "React.Ref.setCurrent": {
    "prefix": "rrsc",
    "body": "React.Ref.setCurrent($0)"
  },
  "React.string": {
    "prefix": "rs",
    "body": "React.string"
  },
  "React.array": {
    "prefix": "ra",
    "body": "React.array"
  },
  "React.null": {
    "prefix": "rn",
    "body": "React.null"
  },
  "dispatch": {
    "prefix": "d",
    "body": "dispatch"
  },
  "let (state, dispatch)": {
    "prefix": "lsd",
    "body": "let (state, dispatch) = $0;"
  },
  "React.useReducer": {
    "prefix": "rur",
    "body": "React.useReducer($0)"
  },
  "React.useRef": {
    "prefix": "ruref",
    "body": "React.useRef($0)"
  },
  "React.useRef(Js.Nullable.null)": {
    "prefix": "rudref",
    "body": "React.useRef(Js.Nullable.null);"
  },
  "ReactDom.Ref.domRef": {
    "prefix": "rrdr",
    "body": "ReactDom.Ref.domRef"
  },
  "React.useEffect": {
    "prefix": "rue",
    "body": "React.useEffect$1(() => {\n  $0\n});"
  },
  "React.useMemo": {
    "prefix": "rum",
    "body": "React.useMemo$1(() => $0);"
  },
  "React.useCallback": {
    "prefix": "ruc",
    "body": "React.useCallback$1($0);"
  },
  "React.Update": {
    "prefix": "ru",
    "body": "React.Update"
  },
  "React.Update({...state})": {
    "prefix": "rus",
    "body": "React.Update({...state, $0})"
  },
  "React.SideEffects": {
    "prefix": "rse",
    "body": "React.SideEffects(({$1}) => {$0})"
  },
  "React.UpdateWithSideEffects": {
    "prefix": "ruwse",
    "body": "React.UpdateWithSideEffects(\n  {...state, $1},\n  ({$2}) => $0\n)"
  },
  "React.NoUpdate": {
    "prefix": "rnu",
    "body": "React.NoUpdate"
  },
  "ReactEvent": {
    "prefix": "re",
    "body": "ReactEvent"
  },
  "ReactEvent.Form.target##value": {
    "prefix": "reftv",
    "body": "ReactEvent.Form.target##value"
  },
  "make.reducer": {
    "prefix": "lmr",
    "body": "let make = (~$0, _) => {\n  ...component,\n  initialState: () => {},\n  reducer: (action, state) =>\n    switch action {\n    | Action => React.Update({...state, })\n    },\n  render: ({state, send}) =>\n\n};"
  },
  "JS.interface": {
    "prefix": "jsi",
    "body": "/* JS interface */\ntype jsProps = {\n  .\n  $1\n};\n\nlet default =\n  React.wrapReasonForJs(\n    ~component,\n    (props: jsProps) => make($0)\n  );"
  },
  "children": {
    "prefix": "ch",
    "body": "children"
  },
  "external.css": {
    "prefix": "ecss",
    "body": "[@bs.module] external css: Js.t({..}) = \"./${0:Component}.scss\";"
  },
  "css": {
    "prefix": "css",
    "body": "Css"
  },
  "module Css": {
    "prefix": "mcss",
    "body": "module Css = $0;"
  },
  "className": {
    "prefix": "cn",
    "body": "className"
  },
  "className.css": {
    "prefix": "cncss",
    "body": "className=Css$0"
  },
  "div.className.css": {
    "prefix": "dcncss",
    "body": "<div className=Css$1>\n  $0\n</div>"
  },
  "Cn.make": {
    "prefix": "cnm",
    "body": "Cn.make([$0])"
  },
  "Cn.ifTrue": {
    "prefix": "cnift",
    "body": "Css$1->Cn.ifTrue($0)"
  },
  "Cn.mapSome": {
    "prefix": "cnms",
    "body": "Css.mapSome(\n  ${1:opt},\n  (${1:opt}) =>\n    switch ${1:opt} {\n    | ${2:Case} => Css$0\n    }\n)"
  },
  "[@log]": {
    "prefix": "l",
    "body": "[@log]"
  },
  "[%log.debug]": {
    "prefix": "ld",
    "body": "[%log.debug \"$0\"];"
  },
  "[%log.info]": {
    "prefix": "li",
    "body": "[%log.info \"$0\"];"
  },
  "[%log.warn]": {
    "prefix": "lw",
    "body": "[%log.warn \"$0\"];"
  },
  "[%log.error]": {
    "prefix": "le",
    "body": "[%log.error \"$0\"];"
  }
}
