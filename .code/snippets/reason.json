{
  "string": {
    "prefix": "s",
    "body": "string"
  },
  "int": {
    "prefix": "i",
    "body": "int"
  },
  "float": {
    "prefix": "f",
    "body": "float"
  },
  "option": {
    "prefix": "o",
    "body": "option($0)"
  },
  "|>": {
    "prefix": ">",
    "body": "|> $0"
  },
  "Js.t {.}": {
    "prefix": "jst",
    "body": "{. $0}"
  },
  "Js.t {..}": {
    "prefix": "jsot",
    "body": "{.. $0}"
  },
  "Js.boolean": {
    "prefix": "jsb",
    "body": "Js.boolean"
  },
  "Js.nullable": {
    "prefix": "jsn",
    "body": "Js.nullable($0)"
  },
  "Js.to_bool": {
    "prefix": "jstob",
    "body": "Js.to_bool"
  },
  "Js.Boolean.to_js_boolean": {
    "prefix": "jsbto",
    "body": "Js.Boolean.to_js_boolean"
  },
  "Js.Nullable.to_opt": {
    "prefix": "jsnto",
    "body": "Js.Nullable.to_opt"
  },
  "Js.Nullable.from_opt": {
    "prefix": "jsnfo",
    "body": "Js.Nullable.from_opt"
  },
  "React": {
    "prefix": "r",
    "body": "React"
  },
  "ReasonReact": {
    "prefix": "rr",
    "body": "ReasonReact"
  },
  "ReasonReact.statelessComponent": {
    "prefix": "rrsc",
    "body":
      "let component = \"${0:Component}\" |> ReasonReact.statelessComponent;"
  },
  "ReasonReact.statelessComponentWithRetainedProps": {
    "prefix": "rrscwrp",
    "body":
      "let component = \"${0:Component}\" |> ReasonReact.statelessComponentWithRetainedProps;"
  },
  "ReasonReact.reducerComponent": {
    "prefix": "rrrc",
    "body":
      "let component = \"${0:Component}\" |> ReasonReact.reducerComponent;"
  },
  "ReasonReact.reducerComponentWithRetainedProps": {
    "prefix": "rrrcwrp",
    "body":
      "let component = \"${0:Component}\" |> ReasonReact.reducerComponentWithRetainedProps;"
  },
  "ReasonReact.stringToElement": {
    "prefix": "rrste",
    "body": "ReasonReact.stringToElement"
  },
  "ReasonReact.arrayToElement": {
    "prefix": "rrate",
    "body": "ReasonReact.arrayToElement"
  },
  "ReasonReact.nullElement": {
    "prefix": "rrne",
    "body": "ReasonReact.nullElement"
  },
  "ReasonReact.Update": {
    "prefix": "rru",
    "body": "ReasonReact.Update({...state, $0})"
  },
  "ReasonReact.SideEffects": {
    "prefix": "rrse",
    "body": "ReasonReact.SideEffects(({$1}) => {$0})"
  },
  "ReasonReact.UpdateWithSideEffects": {
    "prefix": "rruwse",
    "body": [
      "ReasonReact.UpdateWithSideEffects(",
      "  {...state, $1},",
      "  ({$2}) => {$0}",
      ")"
    ]
  },
  "ReasonReact.NoUpdate": {
    "prefix": "rrnu",
    "body": "ReasonReact.NoUpdate"
  },
  "ReactEventRe.Mouse.t": {
    "prefix": "remt",
    "body": "ReactEventRe.Mouse.t"
  },
  "ReactEventRe.Mouse.t => unit": {
    "prefix": "remtu",
    "body": "ReactEventRe.Mouse.t => unit"
  },
  "ReactEventRe.Keyboard.t": {
    "prefix": "rekt",
    "body": "ReactEventRe.Keyboard.t"
  },
  "ReactEventRe.Keyboard.t => unit": {
    "prefix": "rektu",
    "body": "ReactEventRe.Keyboard.t => unit"
  },
  "ReactEventRe.Form.t": {
    "prefix": "reformt",
    "body": "ReactEventRe.Form.t"
  },
  "ReactEventRe.Form.t => unit": {
    "prefix": "reformtu",
    "body": "ReactEventRe.Form.t => unit"
  },
  "ReactEventRe.Focus.t": {
    "prefix": "refocust",
    "body": "ReactEventRe.Focus.t"
  },
  "ReactEventRe.Focus.t => unit": {
    "prefix": "refocustu",
    "body": "ReactEventRe.Focus.t => unit"
  },
  "ReactEventRe.Selection.t": {
    "prefix": "rest",
    "body": "ReactEventRe.Selection.t"
  },
  "ReactEventRe.Selection.t => unit": {
    "prefix": "restu",
    "body": "ReactEventRe.Selection.t => unit"
  },
  "ReactEventRe.Touch.t": {
    "prefix": "rett",
    "body": "ReactEventRe.Touch.t"
  },
  "ReactEventRe.Touch.t => unit": {
    "prefix": "rettu",
    "body": "ReactEventRe.Touch.t => unit"
  },
  "ReasonReact.createDomElement": {
    "prefix": "rrcde",
    "body":
      "ReasonReact.createDomElement(\"${1:element}\", ~props={$0}, children)"
  },
  "make": {
    "prefix": "lm",
    "body": [
      "let make = (~$1, ${2:_}) => {",
      "  ...component,",
      "  render: (_) =>",
      "    $0",
      "};"
    ]
  },
  "make reducer": {
    "prefix": "lmr",
    "body": [
      "let make = (~$0, _) => {",
      "  ...component,",
      "  initialState: () => {},",
      "  reducer: (action, state) =>",
      "    switch action {",
      "    | Action => ReasonReact.Update({...state, })",
      "    },",
      "  render: ({state, send}) =>",
      "",
      "};"
    ]
  },
  "children": {
    "prefix": "ch",
    "body": "children"
  },
  "external.css": {
    "prefix": "ecss",
    "body":
      "[@bs.module] external css: Js.t({..}) = \"./${0:Component}.styles.css\";"
  },
  "css": {
    "prefix": "css",
    "body": "css##$0"
  },
  "className": {
    "prefix": "cn",
    "body": "className"
  },
  "Cn.make": {
    "prefix": "cnm",
    "body": "Cn.make([$0])"
  },
  "Cn.ifBool": {
    "prefix": "cnifb",
    "body": "Css.ifBool($1, css##$0)"
  },
  "Cn.mapOpt": {
    "prefix": "cnmo",
    "body": [
      "Css.mapOpt(",
      "  ${1:opt},",
      "  (${1:opt}) =>",
      "    switch ${1:opt} {",
      "    | ${2:Case} => css##$0",
      "    }",
      ")"
    ]
  }
}
