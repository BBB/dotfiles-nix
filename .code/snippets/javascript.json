{
  "console.log": {
    "prefix": "l",
    "body": "console.log($0);"
  },
  "console.log.return": {
    "prefix": "lor",
    "body": "console.log($0) ||"
  },
  "console.log.jsx": {
    "prefix": "ljsx",
    "body": "{console.log($0)}"
  },
  "console.log.destructured": {
    "prefix": "ld",
    "body": "console.log({ $0 });"
  },
  "console.log.destructured.return": {
    "prefix": "ldor",
    "body": "console.log({ $0 }) ||"
  },
  "console.log.destructured.jsx": {
    "prefix": "ldor",
    "body": "{console.log({ $0 })}"
  },
  "debugger": {
    "prefix": "dbg",
    "body": "debugger"
  },
  "const": {
    "prefix": "c",
    "body": "const ${1:name} = ${0:value};"
  },
  "const.destructuring": {
    "prefix": "cd",
    "body": "const { ${0:prop} } = ${1:obj};"
  },
  "typeof": {
    "prefix": "to",
    "body": "typeof "
  },
  "Flow": {
    "prefix": "f",
    "body": "/* @flow */\n"
  },
  "Flow.number": {
    "prefix": "fn",
    "body": "number"
  },
  "Flow.string": {
    "prefix": "fs",
    "body": "string"
  },
  "Flow.boolean": {
    "prefix": "fb",
    "body": "boolean"
  },
  "Flow.function": {
    "prefix": "ff",
    "body": "($0) => ${1:void}"
  },
  "Flow.React.ComponentType": {
    "prefix": "frct",
    "body": "React.ComponentType<$0>"
  },
  "Flow.React.Node": {
    "prefix": "frn",
    "body": "React.Node"
  },
  "Flow.React.Element": {
    "prefix": "fre",
    "body": "React.Element<*>"
  },
  "Flow.React.ElementRef": {
    "prefix": "frer",
    "body": "React.ElementRef<$0>"
  },
  "Flow.children": {
    "prefix": "fch",
    "body": "children: React.Node,"
  },
  "Flow.HTMLElement": {
    "prefix": "fhe",
    "body": "HTMLElement"
  },
  "Flow.HTMLDivElement": {
    "prefix": "fhde",
    "body": "HTMLDivElement"
  },
  "Flow.HTMLInputElement": {
    "prefix": "fhie",
    "body": "HTMLInputElement"
  },
  "Flow.HTMLButtonElement": {
    "prefix": "fhbe",
    "body": "HTMLButtonElement"
  },
  "Flow.SyntheticEvent": {
    "prefix": "fse",
    "body": "SyntheticEvent<$0>"
  },
  "Flow.SyntheticInputEvent": {
    "prefix": "fsie",
    "body": "SyntheticInputEvent<$0>"
  },
  "Flow.SyntheticFocusEvent": {
    "prefix": "fsfe",
    "body": "SyntheticFocusEvent<$0>"
  },
  "Flow.SyntheticKeyboardEvent": {
    "prefix": "fske",
    "body": "SyntheticKeyboardEvent<$0>"
  },
  "Flow.SyntheticMouseEvent": {
    "prefix": "fsme",
    "body": "SyntheticMouseEvent<$0>"
  },
  "Flow.SyntheticTouchEvent": {
    "prefix": "fste",
    "body": "SyntheticTouchEvent<$0>"
  },
  "Flow.type": {
    "prefix": "ft",
    "body": "type ${1:name} = ${0:value};"
  },
  "Flow.type.Props": {
    "prefix": "ftp",
    "body": "type Props = {|\n  $0\n|};"
  },
  "Flow.type.State": {
    "prefix": "fts",
    "body": "type State = {|\n  $0\n|};"
  },
  "Flow.type.exact": {
    "prefix": "fte",
    "body": "type ${1:name} = {|\n  $0\n|};"
  },
  "Flow.FlowTODO": {
    "prefix": "ftodo",
    "body": "$FlowTODO"
  },
  "Flow.FlowIgnoreMe": {
    "prefix": "fim",
    "body": "// $FlowIgnoreMe: ${0:why}"
  },
  "Flow.FlowFixMe": {
    "prefix": "ffm",
    "body": "// $FlowFixMe: ${0:fix what}"
  },
  "import.default": {
    "prefix": "i",
    "body": "import ${0:module} from '${1:location}';"
  },
  "import.named": {
    "prefix": "in",
    "body": "import { ${0:NamedExport} } from '${1:location}';"
  },
  "import.all": {
    "prefix": "ia",
    "body": "import * as ${0:module} from '${1:location}';"
  },
  "import.type": {
    "prefix": "it",
    "body": "import { type ${0:Type} } from '${1:location}';"
  },
  "import.typeof": {
    "prefix": "ito",
    "body":
      "import { typeof ${2:thing} as ${0:TypeAlias} } from '${1:location}';"
  },
  "import.react": {
    "prefix": "ir",
    "body": "import * as React from 'react';"
  },
  "import.immutable": {
    "prefix": "ii",
    "body": "import { ${0} } from 'immutable';"
  },
  "import.immutable.Record": {
    "prefix": "iir",
    "body":
      "import { Record, type RecordOf, type RecordFactory } from 'immutable';"
  },
  "import.immutable.Map": {
    "prefix": "iim",
    "body": "import { Map } from 'immutable';"
  },
  "import.immutable.List": {
    "prefix": "iil",
    "body": "import { List } from 'immutable';"
  },
  "import.immutable.Set": {
    "prefix": "iis",
    "body": "import { Set } from 'immutable';"
  },
  "import.immutable.OrderedSet": {
    "prefix": "iios",
    "body": "import { OrderedSet } from 'immutable';"
  },
  "import.lodash": {
    "prefix": "il",
    "body": "import _ from 'lodash/fp';"
  },
  "import.classnames": {
    "prefix": "icn",
    "body": "import cn from 'classnames';"
  },
  "import.api": {
    "prefix": "iapi",
    "body": "import api from 'api';"
  },
  "import.libs": {
    "prefix": "ilibs",
    "body": "import { ${0:lib} } from 'libs/${1}';"
  },
  "import.models": {
    "prefix": "imodels",
    "body": "import { ${0:Model} } from 'models/${1}';"
  },
  "import.routes": {
    "prefix": "iroutes",
    "body": "import * as routes from 'routes';"
  },
  "import.components": {
    "prefix": "isc",
    "body": "import { ${0:Component} } from 'styleguide/components';"
  },
  "import.forms": {
    "prefix": "isf",
    "body": "import { ${0:Form} } from 'styleguide/forms';"
  },
  "import.icons": {
    "prefix": "isi",
    "body": "import * as Icons from 'styleguide/icons';"
  },
  "import.types": {
    "prefix": "itypes",
    "body": "import type { ${0:Type} } from 'types/${1}';"
  },
  "import.css": {
    "prefix": "icss",
    "body": "import css from '.${0:ComponentStyles.css}';"
  },
  "export.named": {
    "prefix": "en",
    "body": "export { ${0:module} } from '${1:location}';"
  },
  "export.default": {
    "prefix": "ed",
    "body": "export default ${0};"
  },
  "export.default.function": {
    "prefix": "edf",
    "body": "export default function ${1:myFunction}(${2:...args}) {\n  $0\n}"
  },
  "export.const": {
    "prefix": "ec",
    "body": "export const ${1:name} = ${0:value};"
  },
  "export.function": {
    "prefix": "ef",
    "body": "export function ${1:myFunction}(${2:...args}) {\n  $0\n}"
  },
  "export.type": {
    "prefix": "et",
    "body": "export type ${1:name} = ${0:value};"
  },
  "export.exact.type": {
    "prefix": "eet",
    "body": "export type ${1:name} = {|\n  $0\n|};"
  },
  "require": {
    "prefix": "r",
    "body": "const ${1:module} = require('${0:location}');"
  },
  "try.catch": {
    "prefix": "trc",
    "body":
      "try {\n  ${1:expression}\n} catch (error) {\n  ${0:// handle error...}\n}"
  },
  "event": {
    "prefix": "e",
    "body": "event"
  },
  "event.target.name.value": {
    "prefix": "etnv",
    "body": "const { name, value } = event.target;"
  },
  "event.target.name": {
    "prefix": "etn",
    "body": "event.target.name"
  },
  "event.target.value": {
    "prefix": "etv",
    "body": "event.target.value"
  },
  "props": {
    "prefix": "p",
    "body": "props"
  },
  "this.props": {
    "prefix": "tp",
    "body": "this.props"
  },
  "const.this.props": {
    "prefix": "ctp",
    "body": "const { $0 } = this.props;"
  },
  "this.state": {
    "prefix": "ts",
    "body": "this.state"
  },
  "const.this.state": {
    "prefix": "cts",
    "body": "const { $0 } = this.state;"
  },
  "this.context": {
    "prefix": "tc",
    "body": "this.context"
  },
  "const.this.context": {
    "prefix": "ctc",
    "body": "const { ${0} } = this.context;"
  },
  "this.setState": {
    "prefix": "tss",
    "body": "this.setState({$1});"
  },
  "constructor": {
    "prefix": "cnstr",
    "body": "constructor(...args: Array<*>) {\n  super(...args);\n\n  $0\n}"
  },
  "constructor.props": {
    "prefix": "cnstrp",
    "body":
      "constructor(props: Props, ...rest: Array<*>) {\n  super(props, ...rest);\n\n  $0\n}"
  },
  "React.componentWillMount": {
    "prefix": "rcwm",
    "body":
      "componentWillMount = () => {\n  ${0:// use it to do something on a server...}\n};"
  },
  "React.componentDidMount": {
    "prefix": "rcdm",
    "body":
      "componentDidMount = () => {\n  ${0:// use it to do something w/ DOM on instantiation or for data fetching...}\n};"
  },
  "React.componentWillReceiveProps": {
    "prefix": "rcwrp",
    "body":
      "componentWillReceiveProps = (nextProps: Props) => {\n  ${0:// use it to update state or anything in response to next props...}\n};"
  },
  "React.componentWillUpdate": {
    "prefix": "rcwup",
    "body":
      "componentWillUpdate = (nextProps: Props, nextState: State) => {\n  ${0:// use it to do something before an update...}\n};"
  },
  "React.componentDidUpdate": {
    "prefix": "rcdu",
    "body":
      "componentDidUpdate = (prevProps: Props, prevState: State) => {\n  ${0:// use it to do something w/ the DOM after update...}\n};"
  },
  "React.componentWillUnmount": {
    "prefix": "rcwun",
    "body":
      "componentWillUnmount = () => {\n  ${0:// use it to perform any necessary cleanups...}\n};"
  },
  "React.Component": {
    "prefix": "rc",
    "body":
      "/* @flow */\n\nimport * as React from 'react';\n\ntype Props = {|\n\n|};\n\nexport default class ${1:Component} extends React.Component<Props> {\n  render = () => (\n    // jsx...\n  );\n}"
  },
  "React.Component.withState": {
    "prefix": "rcs",
    "body":
      "/* @flow */\n\nimport * as React from 'react';\n\ntype Props = {|\n\n|};\n\ntype State = {|\n\n|};\n\nexport default class ${1:Component} extends React.Component<Props, State> {\n  state = {};\n\n  render = () => (\n    ${0}\n  );\n}"
  },
  "React.SFC": {
    "prefix": "rsfc",
    "body":
      "/* @flow */\n\nimport * as React from 'react';\n\ntype Props = {|\n\n|};\n\nconst ${1:Component} = ({}: Props) => (\n  ${0}\n);\n\nexport default ${1:Component};"
  },
  "React.HOC": {
    "prefix": "rhoc",
    "body":
      "/* @flow */\n\nimport * as React from 'react';\n\ntype Props = {|\n\n|};\n\ntype State = {|\n\n|};\n\ntype ChildProps = {\n  ...Props,\n  ...State,\n  ...Handlers,\n};\n\nconst ${1:withHOC} = (${2:Child}: React.ComponentType<ChildProps>) =>\n  class extends React.Component<Props> {\n    render = () => (\n      <${2:Child} />\n    );\n  };\n\nexport default ${1:withHOC};"
  },
  "React.children": {
    "prefix": "ch",
    "body": "children"
  },
  "React.this.props.children": {
    "prefix": "tpch",
    "body": "this.props.children"
  },
  "React.className": {
    "prefix": "cn",
    "body": "className"
  },
  "JSX.className.css": {
    "prefix": "cncss",
    "body": "className={css.${0}}"
  },
  "JSX.div.className.css": {
    "prefix": "dcncss",
    "body": "<div className={css.$1}>\n  $0\n</div>"
  },
  "JSX.onClick": {
    "prefix": "ocl",
    "body": "onClick={$0}"
  },
  "JSX.onChange": {
    "prefix": "och",
    "body": "onChange={$0}"
  },
  "interaction": {
    "prefix": "int",
    "body":
      "/* @flow */\n\nimport type { ActionHandler } from 'app/types/redux';\nimport type { LeafState } from '../state';\n\n${0:// ins / inas / inr ...}"
  },
  "interaction.sync": {
    "prefix": "ints",
    "body":
      "// --- ${1:Feature}\n\nconst ${2:STATE_UPDATE}: '${2:STATE_UPDATE}' = '${2:STATE_UPDATE}';\n\n// Action creator\ntype Action = {|\n  type: typeof ${2:STATE_UPDATE},\n|};\n\nexport const updateState = (): Action => ({\n  type: ${2:STATE_UPDATE},\n});\n\n\n// Action handler\ntype OnStateUpdate = {\n  [typeof ${2:STATE_UPDATE}]: ActionHandler<LeafState, Action>,\n};\n\nexport const onStateUpdate: OnStateUpdate = {\n  [${2:STATE_UPDATE}]:\n    (state) =>\n      state,\n};"
  },
  "interaction.async": {
    "prefix": "intas",
    "body":
      "// --- ${1:Async Feature}\n\nconst ${2:ASYNC_STATE_UPDATE}: '${2:ASYNC_STATE_UPDATE}' = '${2:ASYNC_STATE_UPDATE}';\n\n// Action creator\ntype Action = {|\n  type: typeof ${2:ASYNC_STATE_UPDATE},\n|};\n\nconst updateStateAsyncAction = (): Action => ({\n  type: ${2:ASYNC_STATE_UPDATE},\n});\n\nexport const updateStateAsync = (): Thunk => (dispatch, getState) => {\n  // do stuff...\n  dispatch(updateStateAsyncAction());\n};\n\n\n// Action handler\ntype OnAsyncStateUpdate = {\n  [typeof ${2:ASYNC_STATE_UPDATE}]: ActionHandler<LeafState, Action>,\n};\n\nexport const onAsyncStateUpdate: OnAsyncStateUpdate = {\n  [${2:ASYNC_STATE_UPDATE}]:\n    (state) =>\n      state,\n};"
  },
  "interaction.remote": {
    "prefix": "intr",
    "body":
      "const REQUESTED: 'REQUESTED' = 'REQUESTED';\nconst SUCCEEDED: 'SUCCEEDED' = 'SUCCEEDED';\nconst FAILED: 'FAILED' = 'FAILED';\n\n// --- Request\n\n// Action creator\ntype RequestAction = {|\n  type: typeof REQUESTED,\n|};\n\nconst requestAction = (): RequestAction => ({\n  type: REQUESTED,\n});\n\n// Action handler\ntype OnRequest = {\n  [typeof REQUESTED]: ActionHandler<LeafState, RequestAction>,\n};\n\nconst onRequest: OnRequest = {\n  [UPDATE_REQUESTED]:\n    (state) =>\n      state.set('isProcessing', true),\n};\n\n\n// --- Success\n\n// Action creator\ntype SuccessAction = {|\n  type: typeof SUCCEEDED,\n|};\n\nconst successAction = (\n  // ...args\n): SuccessAction => ({\n  type: SUCCEEDED,\n  // ...args\n});\n\n// Action handler\ntype OnSuccess = {\n  [typeof SUCCEEDED]: ActionHandler<LeafState, SuccessAction>,\n};\n\nconst onSuccess: OnSuccess = {\n  [SUCCEEDED]:\n    (state) =>\n      state,\n};\n\n\n// --- Failure\n\n// Action creator\ntype FailureAction = {\n  type: typeof FAILED,\n  error: ResponseError,\n};\n\nconst failureAction = (error: ResponseError): FailureAction => ({\n  type: FAILED,\n  error,\n});\n\n// Action handler\ntype OnFailure = {\n  [type: typeof FAILED]: ActionHandler<LeafState, FailureAction>,\n};\n\nconst onFailure: OnFailure = {\n  [FAILED]:\n    (state) =>\n      state,\n};\n\n\n// --- Exports\n\n// Thunk\nexport const updateServerState = (): Thunk => (dispatch, getState) => {\n  // Perform local checks...\n\n  dispatch(requestAction());\n\n  const nextServerData = formStateSelector(state);\n\n  api\n    .patch({ url, data })\n    .then(\n      // success\n      () => dispatch(successAction()),\n\n      // failure\n      (error: ResponseError) => dispatch(withApiErrorMiddleware(failureAction(error))),\n    )\n  ;\n};\n\n// Action handlers\nexport const onServerStateUpdate = {\n  ...onRequest,\n  ...onSuccess,\n  ...onFailure,\n};"
  },
  "Eslint.disable": {
    "prefix": "esld",
    "body": "/* eslint-disable ${1:rule} */"
  },
  "Eslint.enable": {
    "prefix": "esle",
    "body": "/* eslint-enable ${1:rule} */"
  },
  "Eslint.disable-line": {
    "prefix": "esldl",
    "body": "// eslint-disable-line ${1:rule}"
  },
  "Eslint.disable-next-line": {
    "prefix": "esldnl",
    "body": "// eslint-disable-next-line ${1:rule}"
  }
}
