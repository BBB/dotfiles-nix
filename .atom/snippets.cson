# ======= JavaScript

'.source.js':

  'console.log':
    'prefix': 'l'
    'body': 'console.log(${0})'

  'console.log ||':
    'prefix': 'lr'
    'body': 'console.log(${0}) ||'

  'console.log.jsx':
    'prefix': 'lx'
    'body': '{console.log(${0})}'

  'debugger':
    'prefix': 'dbg'
    'body': 'debugger'

  'const':
    'prefix': 'c'
    'body': 'const ${1:name} = ${0:value};'

  'type':
    'prefix': 't'
    'body': 'type ${1:name} = ${0:value};'

  'type Props':
    'prefix': 'tp'
    'body': 'type Props = {${0}};'

  'type exact':
    'prefix': 'te'
    'body': """
      type ${1:name} = {|
        ${0}
      |};
    """

  'export default':
    'prefix': 'ed'
    'body': 'export default ${0};'

  'export default function':
    'prefix': 'edf'
    'body': """
      export default function ${1:myFunction}(${2:...args}) {
        ${0}
      }
    """

  'export const':
    'prefix': 'ec'
    'body': 'export const ${1:name} = ${0:value};'

  'export function':
    'prefix': 'ef'
    'body': """
      export function ${1:myFunction}(${2:...args}) {
        ${0}
      }
    """

  'export type':
    'prefix': 'et'
    'body': 'export type ${1:name} = ${0:value};'

  'export exact type':
    'prefix': 'eet'
    'body': """
      export type ${1:name} = {|
        ${0}
      |};
    """

  'import':
    'prefix': 'i'
    'body': 'import ${1:module} from \'${0:location}\';'

  'import type':
    'prefix': 'it'
    'body': 'import type { ${1:Type} } from \'${0:location}\';'

  'import react':
    'prefix': 'ir'
    'body': 'import React from \'react\';'

  'import react w/ Component':
    'prefix': 'irc'
    'body': 'import React, { Component } from \'react\';'

  'import immutable':
    'prefix': 'ii'
    'body': 'import Immutable from \'immutable\';'

  'import immutable Map':
    'prefix': 'iim'
    'body': 'import { Map } from \'immutable\';'

  'import immutable List':
    'prefix': 'iil'
    'body': 'import { List } from \'immutable\';'

  'import immutable Set':
    'prefix': 'iis'
    'body': 'import { Set } from \'immutable\';'

  'import lodash':
    'prefix': 'il'
    'body': 'import _ from \'lodash/fp\';'

  'import classnames':
    'prefix': 'ic'
    'body': 'import classNames from \'classnames\';'

  'import styles':
    'prefix': 'is'
    'body': 'import styles from \'./styles.css\';'

  'require':
    'prefix': 'r'
    'body': 'const ${1:module} = require(\'${0:location}\');'

  'try/catch':
    'prefix': 'trc'
    'body': """
      try {
        ${1:expression}
      } catch (error) {
        ${0:// handle error...}
      }
    """

  'this.props':
    'prefix': 'rtp'
    'body': 'this.props'

  'props':
    'prefix': 'p'
    'body': 'props'

  'this.context':
    'prefix': 'rtc'
    'body': 'this.context'

  'this.state':
    'prefix': 'rts'
    'body': 'this.state'

  'this.setState':
    'prefix': 'rtss'
    'body': 'this.setState({${1}});'

  'styles':
    'prefix': 's'
    'body': 'styles'

  'flow':
    'prefix': 'f'
    'body': """
      /* @flow */

    """

  'constructor':
    'prefix': 'cnstr'
    'body': """
      constructor(...args: Array<*>) {
        super(...args);

        ${1}
      }
    """

  'constructor w/ props':
    'prefix': 'cnstrp'
    'body': """
      constructor(props: Props, ...restArgs: Array<*>) {
        super(props, ...restArgs);

        ${1}
      }
    """

  'React.Component':
    'prefix': 'rc'
    'body': """
      /* @flow */

      import React, { Component } from 'react';


      type Props = {};

      export default class ${1:Component} extends Component {

        props: Props;

        render() {
          return (
            // jsx...
          );
        }

      }
    """

  'React.Functional.Component':
    'prefix': 'rfc'
    'body': """
      /* @flow */

      import React from 'react';


      const ${1:Component} = (props) => (
        // jsx...
      );

      export default ${1:Component};
    """

  'React.HOC':
    'prefix': 'rh'
    'body': """
      /* @flow */

      import React, { Component } from 'react';


      type Props = {};

      type NextProps = Props & State & Handlers;
      type NextComponent = (props: NextProps) => React.Element<*>;

      const ${1:withHOC} = (${2:NextComponent}: NextComponent) => class extends Component {

        props: Props;

        render() {
          return (
            <${2:NextComponent} />
          );
        }
      };

      export default ${1:withHOC};
    """

  'story':
    'prefix': 'st'
    'body': """
      /* @flow */

      import type { $ReducerHandler } from 'types/redux';
      import type { $StoreState } from './initialState';

      ${0:// stf / staf / stsup ...}
    """

  'story feature':
    'prefix': 'stf'
    'body': """
      // --- ${1:Feature}

      const ${2:STATE_UPDATE}: '${2:STATE_UPDATE}' = '${2:STATE_UPDATE}';

      // Action
      type $Action = {| type: typeof ${2:STATE_UPDATE} |};

      export const updateState = (): $Action => ({
        type: ${2:STATE_UPDATE},
      });


      // Reducer
      type $OnStateUpdate = {|
        [type: typeof ${2:STATE_UPDATE}]: $ReducerHandler<$StoreState, $Action>,
      |};

      export const onStateUpdate: $OnStateUpdate = {
        [${2:STATE_UPDATE}]:
          (state) =>
            state,
      };
    """

  'story async feature':
    'prefix': 'staf'
    'body': """
      // --- ${1:Async Feature}

      const ${2:ASYNC_STATE_UPDATE}: '${2:ASYNC_STATE_UPDATE}' = '${2:ASYNC_STATE_UPDATE}';

      // Action
      type $Action = {| type: typeof ${2:ASYNC_STATE_UPDATE} |};

      const updateStateAsyncAction = (): $Action => ({
        type: ${2:ASYNC_STATE_UPDATE},
      });

      export const updateStateAsync = (): $Thunk => (dispatch, getState) => {
        // do stuff...
        dispatch(updateStateAsyncAction());
      };


      // Reducer
      type $OnAsyncStateUpdate = {|
        [type: typeof ${2:ASYNC_STATE_UPDATE}]: $ReducerHandler<$StoreState, $Action>,
      |};

      export const onAsyncStateUpdate: $OnAsyncStateUpdate = {
        [${2:ASYNC_STATE_UPDATE}]:
          (state) =>
            state,
      };
    """

  'story server update':
    'prefix': 'stsup'
    'body': """
      const REQUESTED: 'REQUESTED' = 'REQUESTED';
      const SUCCEEDED: 'SUCCEEDED' = 'SUCCEEDED';
      const FAILED: 'FAILED' = 'FAILED';


      // --- Request

      // Action
      type $RequestAction = {| type: typeof REQUESTED |};
      const requestAction = (): $RequestAction => ({ type: REQUESTED });

      // Reducer
      type $OnRequest = {
        [type: typeof REQUESTED]: $ReducerHandler<$StoreState, $RequestAction>,
      };
      const onRequest: $OnRequest = {
        [UPDATE_REQUESTED]:
          (state) =>
            state.set('isProcessing', true),
      };


      // --- Success

      // Action
      type $SuccessAction = {|
        type: typeof SUCCEEDED,
      |};

      const successAction = (
        // ...args
      ): $SuccessAction => ({
        type: SUCCEEDED,
        // ...args
      });

      // Reducer
      type $OnSuccess = {
        [type: typeof SUCCEEDED]: $ReducerHandler<$StoreState, $SuccessAction>,
      };
      const onSuccess: $OnSuccess = {
        [SUCCEEDED]:
          (state) =>
            state,
      };


      // --- Failure

      // Action
      type $FailureAction = {
        type: typeof FAILED,
        error: $ResponseError,
      };

      const failureAction =
        (error: $ResponseError): $FailureAction => ({
          type: FAILED,
          error,
        })
      ;

      // Reducer
      type $OnFailure = {
        [type: typeof FAILED]: $ReducerHandler<$StoreState, $FailureAction>,
      };
      const onFailure: $OnFailure = {
        [FAILED]:
          (state) =>
            state,
      };


      // --- Exports

      // Action creator
      export const updateServerState =
        (): Thunk => (dispatch, getState) => {
          // Perform local checks...

          dispatch(requestAction());

          const nextServerData = formStateSelector(state);

          api
            .patch({ url, data })
            .then(
              () => dispatch(successAction()),
              (error: $ResponseError) => dispatch(withApiErrorMiddleware(failureAction(error))),
            )
          ;
        }
      ;


      // Reducers
      export const onServerStateUpdate = {
        ...onRequest,
        ...onSuccess,
        ...onFailure,
      };
    """

  'Eslint.disable':
    'prefix': 'esld'
    'body': '/* eslint-disable ${1:rule} */'

  'Eslint.enable':
    'prefix': 'esle'
    'body': '/* eslint-enable ${1:rule} */'

  'Eslint.disable-line':
    'prefix': 'esldl'
    'body': '// eslint-disable-line ${1:rule}'

  'Eslint.disable-next-line':
    'prefix': 'esldnl'
    'body': '// eslint-disable-next-line ${1:rule}'

  'Flow.number':
    'prefix': 'fn'
    'body': 'number'

  'Flow.string':
    'prefix': 'fs'
    'body': 'string'

  'Flow.boolean':
    'prefix': 'fb'
    'body': 'boolean'

  'Flow.function.no-args':
    'prefix': 'ff'
    'body': '() => ${0:void}'

  'Flow.function.args':
    'prefix': 'ffa'
    'body': '(${1:arg}) => ${0:void}'

  'Flow.no-args':
    'prefix': 'fna'
    'body': '...args: Array<void>'

  'Flow.no-rest-args':
    'prefix': 'fnra'
    'body': '...rest: Array<void>'

  'PropTypes.shape':
    'prefix': 'ptsh'
    'body': """
      PropTypes.shape({
        ${1:property}: ${0}
      }),
    """

  'PropTypes.shape.isRequired':
    'prefix': 'ptshr'
    'body': """
      PropTypes.shape({
        ${1:property}: pt${0}
      }).isRequired,
    """

  'PropTypes.bool':
    'prefix': 'ptb'
    'body': 'PropTypes.bool,'

  'PropTypes.bool.isRequired':
    'prefix': 'ptbr'
    'body': 'PropTypes.bool.isRequired,'

  'PropTypes.string':
    'prefix': 'pts'
    'body': 'PropTypes.string,'

  'PropTypes.string.isRequired':
    'prefix': 'ptsr'
    'body': 'PropTypes.string.isRequired,'

  'PropTypes.number':
    'prefix': 'ptn'
    'body': 'PropTypes.number,'

  'PropTypes.number.isRequired':
    'prefix': 'ptnr'
    'body': 'PropTypes.number.isRequired,'

  'PropTypes.array':
    'prefix': 'pta'
    'body': 'PropTypes.array,'

  'PropTypes.array.isRequired':
    'prefix': 'ptar'
    'body': 'PropTypes.array.isRequired,'

  'PropTypes.object':
    'prefix': 'pto'
    'body': 'PropTypes.object,'

  'PropTypes.object.isRequired':
    'prefix': 'ptor'
    'body': 'PropTypes.object.isRequired,'

  'PropTypes.func':
    'prefix': 'ptf'
    'body': 'PropTypes.func,'

  'PropTypes.func.isRequired':
    'prefix': 'ptfr'
    'body': 'PropTypes.func.isRequired,'

  'PropTypes.instanceOf':
    'prefix': 'pti'
    'body': 'PropTypes.instanceOf(${0}),'

  'PropTypes.instanceOf.isRequired':
    'prefix': 'ptir'
    'body': 'PropTypes.instanceOf(${0}).isRequired,'

  'PropTypes.oneOf':
    'prefix': 'ptoo'
    'body': 'PropTypes.oneOf([${0}]),'

  'PropTypes.oneOf.isRequired':
    'prefix': 'ptoor'
    'body': 'PropTypes.oneOf([${0}]).isRequired,'

  'PropTypes.oneOfType':
    'prefix': 'ptoot'
    'body': 'PropTypes.oneOfType([pt${0}]),'

  'PropTypes.oneOfType.isRequired':
    'prefix': 'ptootr'
    'body': 'PropTypes.oneOfType([pt${0}]).isRequired,'

  'PropTypes.arrayOf':
    'prefix': 'ptao'
    'body': 'PropTypes.arrayOf(pt${0}),'

  'PropTypes.arrayOf.isRequired':
    'prefix': 'ptaor'
    'body': 'PropTypes.arrayOf(pt${0}).isRequired,'

  'PropTypes.any':
    'prefix': 'ptany'
    'body': 'PropTypes.any,'

  'PropTypes.any.isRequired':
    'prefix': 'ptanyr'
    'body': 'PropTypes.any.isRequired,'

  'JSDoc':
    'prefix': '@@'
    'body': """
      /**
       * @desc ${1:Method description}
       *
       */
    """
