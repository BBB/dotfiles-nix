# ======= JavaScript

'.source.js':

  'console.log':
    'prefix': 'l'
    'body': 'console.log(${0})'

  'console.log ||':
    'prefix': 'lor'
    'body': 'console.log(${0}) ||'

  'console.log.jsx':
    'prefix': 'ljsx'
    'body': '{console.log(${0})}'

  'debugger':
    'prefix': 'dbg'
    'body': 'debugger'

  'const':
    'prefix': 'c'
    'body': 'const ${1:name} = ${0:value};'

  'Flow.number':
    'prefix': 'fn'
    'body': 'number'

  'Flow.string':
    'prefix': 'fs'
    'body': 'string'

  'Flow.boolean':
    'prefix': 'fb'
    'body': 'boolean'

  'Flow.function.no-args':
    'prefix': 'ff'
    'body': '() => ${0:void}'

  'Flow.function.args':
    'prefix': 'ffa'
    'body': '(${1:arg}) => ${0:void}'

  'Flow.no-args':
    'prefix': 'fna'
    'body': '...args: Array<void>'

  'Flow.no-rest-args':
    'prefix': 'fnra'
    'body': '...rest: Array<void>'

  'Flow.React.Element':
    'prefix': 'fre'
    'body': 'React.Element<*>'

  'Flow.HTMLElement':
    'prefix': 'fhtmle'
    'body': 'HTMLElement'

  'Flow.SyntheticEvent':
    'prefix': 'fse'
    'body': 'SyntheticEvent'

  'Flow.SyntheticInputEvent':
    'prefix': 'fsie'
    'body': 'SyntheticInputEvent'

  'Flow.SyntheticKeyboardEvent':
    'prefix': 'fske'
    'body': 'SyntheticKeyboardEvent'

  'Flow.SyntheticMouseEvent':
    'prefix': 'fsme'
    'body': 'SyntheticMouseEvent'

  'Flow.SyntheticTouchEvent':
    'prefix': 'fste'
    'body': 'SyntheticTouchEvent'

  'Flow.type':
    'prefix': 't'
    'body': 'type ${1:name} = ${0:value};'

  'Flow.type.Props':
    'prefix': 'tp'
    'body': """
      type $Props = {|
        ${0}
      |};
    """

  'Flow.type.exact':
    'prefix': 'te'
    'body': """
      type ${1:name} = {|
        ${0}
      |};
    """

  'Flow.FlowTODO':
    'prefix': 'ftodo'
    'body': '$FlowTODO'

  'Flow.FlowIgnoreMe':
    'prefix': 'fim'
    'body': '// $FlowIgnoreMe: ${0:reason}'

  'Flow.FlowFixMe':
    'prefix': 'ffm'
    'body': '// $FlowFixMe: ${0:fix what}'

  'export':
    'prefix': 'e'
    'body': 'export { ${0:module} } from \'${1:location}\';'

  'export default':
    'prefix': 'ed'
    'body': 'export default ${0};'

  'export default function':
    'prefix': 'edf'
    'body': """
      export default function ${1:myFunction}(${2:...args}) {
        ${0}
      }
    """

  'export const':
    'prefix': 'ec'
    'body': 'export const ${1:name} = ${0:value};'

  'export function':
    'prefix': 'ef'
    'body': """
      export function ${1:myFunction}(${2:...args}) {
        ${0}
      }
    """

  'export type':
    'prefix': 'et'
    'body': 'export type ${1:name} = ${0:value};'

  'export exact type':
    'prefix': 'eet'
    'body': """
      export type ${1:name} = {|
        ${0}
      |};
    """

  'import':
    'prefix': 'i'
    'body': 'import ${0:module} from \'${1:location}\';'

  'import type':
    'prefix': 'it'
    'body': 'import type { ${0:Type} } from \'${1:location}\';'

  'import react':
    'prefix': 'ir'
    'body': 'import React from \'react\';'

  'import react w/ Children':
    'prefix': 'irc'
    'body': 'import React, { Children } from \'react\';'

  'import immutable':
    'prefix': 'ii'
    'body': 'import Immutable from \'immutable\';'

  'import immutable Record':
    'prefix': 'iir'
    'body': 'import { Record } from \'immutable\';'

  'import immutable Map':
    'prefix': 'iim'
    'body': 'import { Map } from \'immutable\';'

  'import immutable List':
    'prefix': 'iil'
    'body': 'import { List } from \'immutable\';'

  'import immutable Set':
    'prefix': 'iis'
    'body': 'import { Set } from \'immutable\';'

  'import immutable OrderedSet':
    'prefix': 'iios'
    'body': 'import { OrderedSet } from \'immutable\';'

  'import lodash':
    'prefix': 'il'
    'body': 'import _ from \'lodash/fp\';'

  'import classnames':
    'prefix': 'ic'
    'body': 'import cn from \'classnames\';'

  'import styles':
    'prefix': 'is'
    'body': 'import styles from \'./styles.css\';'

  'import css':
    'prefix': 'icss'
    'body': 'import css from \'./index.css\';'

  'require':
    'prefix': 'r'
    'body': 'const ${1:module} = require(\'${0:location}\');'

  'try/catch':
    'prefix': 'trc'
    'body': """
      try {
        ${1:expression}
      } catch (error) {
        ${0:// handle error...}
      }
    """

  'event.target.value':
    'prefix': 'etv'
    'body': 'event.target.value'

  'this.props':
    'prefix': 'rtp'
    'body': 'this.props'

  'props':
    'prefix': 'p'
    'body': 'props'

  'this.context':
    'prefix': 'rtc'
    'body': 'this.context'

  'this.state':
    'prefix': 'rts'
    'body': 'this.state'

  'this.setState':
    'prefix': 'rtss'
    'body': 'this.setState({${1}});'

  'styles':
    'prefix': 's'
    'body': 'styles'

  'flow':
    'prefix': 'f'
    'body': """
      /* @flow */

    """

  'constructor':
    'prefix': 'cnstr'
    'body': """
      constructor = (...args: Array<*>) => {
        super(...args);

        ${0}
      };
    """

  'constructor w/ props':
    'prefix': 'cnstrp'
    'body': """
      constructor = (props: Props, ...rest: Array<*>) => {
        super(props, ...rest);

        ${0}
      };
    """

  'React.componentWillMount':
    'prefix': 'rcwm'
    'body': """
      componentWillMount = () => {
        ${0:// use it to do something on a server...}
      };
    """

  'React.componentDidMount':
    'prefix': 'rcdm'
    'body': """
      componentDidMount = () => {
        ${0:// use it to do something w/ DOM on instantiation or for data fetching...}
      };
    """

  'React.componentWillReceiveProps':
    'prefix': 'rcwrp'
    'body': """
      componentWillReceiveProps = (nextProps: $Props) => {
        ${0:// use it to update state or anything in response to next props...}
      };
    """

  'React.componentWillUpdate':
    'prefix': 'rcwup'
    'body': """
      componentWillUpdate = (nextProps: $Props, nextState: $State) => {
        ${0:// use it to do something before an update...}
      };
    """

  'React.componentDidUpdate':
    'prefix': 'rcdu'
    'body': """
      componentDidUpdate = (prevProps: $Props, prevState: $State) => {
        ${0:// use it to do something w/ the DOM after update...}
      };
    """

  'React.componentWillUnmount':
    'prefix': 'rcwun'
    'body': """
      componentWillUnmount = () => {
        ${0:// use it to perform any necessary cleanups...}
      };
    """

  'React.Component':
    'prefix': 'rc'
    'body': """
      /* @flow */

      import React from 'react';

      type $Props = {|

      |};

      export default class ${1:Component} extends React.Component {
        props: $Props;

        render = () => (
          // jsx...
        );
      }
    """

  'React.SFC':
    'prefix': 'rsfc'
    'body': """
      /* @flow */

      import React from 'react';

      type $Props = {|

      |};

      const ${1:Component} = ({}: $Props) => (
        // jsx...
      );

      export default ${1:Component};
    """

  'React.HOC':
    'prefix': 'rhoc'
    'body': """
      /* @flow */

      import React from 'react';

      type $Props = {|

      |};

      type $ChildProps = {
        ...$Props,
        ...$State,
        ...$Handlers,
      };

      type $Child = (props: $ChildProps) => React.Element<*>;

      const ${1:withHOC} = (${2:Child}: $Child) => class extends React.Component {
        props: $Props;

        render = () => (
          <${2:Child} />
        );
      };

      export default ${1:withHOC};
    """

  'interaction':
    'prefix': 'in'
    'body': """
      /* @flow */

      import type { $ActionHandler } from 'types/redux';
      import type { $StoreState } from '../state';

      ${0:// ins / inas / inr ...}
    """

  'interaction sync':
    'prefix': 'ins'
    'body': """
      // --- ${1:Feature}

      const ${2:STATE_UPDATE}: '${2:STATE_UPDATE}' = '${2:STATE_UPDATE}';

      // Action creator
      type $Action = {|
        type: typeof ${2:STATE_UPDATE},
      |};

      export const updateState = (): $Action => ({
        type: ${2:STATE_UPDATE},
      });


      // Action handler
      type $OnStateUpdate = {
        [typeof ${2:STATE_UPDATE}]: $ActionHandler<$StoreState, $Action>,
      };

      export const onStateUpdate: $OnStateUpdate = {
        [${2:STATE_UPDATE}]:
          (state) =>
            state,
      };
    """

  'interaction async':
    'prefix': 'inas'
    'body': """
      // --- ${1:Async Feature}

      const ${2:ASYNC_STATE_UPDATE}: '${2:ASYNC_STATE_UPDATE}' = '${2:ASYNC_STATE_UPDATE}';

      // Action creator
      type $Action = {|
        type: typeof ${2:ASYNC_STATE_UPDATE},
      |};

      const updateStateAsyncAction = (): $Action => ({
        type: ${2:ASYNC_STATE_UPDATE},
      });

      export const updateStateAsync = (): $Thunk => (dispatch, getState) => {
        // do stuff...
        dispatch(updateStateAsyncAction());
      };


      // Action handler
      type $OnAsyncStateUpdate = {
        [typeof ${2:ASYNC_STATE_UPDATE}]: $ActionHandler<$StoreState, $Action>,
      };

      export const onAsyncStateUpdate: $OnAsyncStateUpdate = {
        [${2:ASYNC_STATE_UPDATE}]:
          (state) =>
            state,
      };
    """

  'interaction remote':
    'prefix': 'inr'
    'body': """
      const REQUESTED: 'REQUESTED' = 'REQUESTED';
      const SUCCEEDED: 'SUCCEEDED' = 'SUCCEEDED';
      const FAILED: 'FAILED' = 'FAILED';


      // --- Request

      // Action creator
      type $RequestAction = {|
        type: typeof REQUESTED,
      |};

      const requestAction = (): $RequestAction => ({
        type: REQUESTED,
      });

      // Action handler
      type $OnRequest = {
        [typeof REQUESTED]: $ActionHandler<$StoreState, $RequestAction>,
      };

      const onRequest: $OnRequest = {
        [UPDATE_REQUESTED]:
          (state) =>
            state.set('isProcessing', true),
      };


      // --- Success

      // Action creator
      type $SuccessAction = {|
        type: typeof SUCCEEDED,
      |};

      const successAction = (
        // ...args
      ): $SuccessAction => ({
        type: SUCCEEDED,
        // ...args
      });

      // Action handler
      type $OnSuccess = {
        [typeof SUCCEEDED]: $ActionHandler<$StoreState, $SuccessAction>,
      };

      const onSuccess: $OnSuccess = {
        [SUCCEEDED]:
          (state) =>
            state,
      };


      // --- Failure

      // Action creator
      type $FailureAction = {
        type: typeof FAILED,
        error: $ResponseError,
      };

      const failureAction = (error: $ResponseError): $FailureAction => ({
        type: FAILED,
        error,
      });

      // Action handler
      type $OnFailure = {
        [type: typeof FAILED]: $ActionHandler<$StoreState, $FailureAction>,
      };

      const onFailure: $OnFailure = {
        [FAILED]:
          (state) =>
            state,
      };


      // --- Exports

      // Thunk
      export const updateServerState = (): Thunk => (dispatch, getState) => {
        // Perform local checks...

        dispatch(requestAction());

        const nextServerData = formStateSelector(state);

        api
          .patch({ url, data })
          .then(
            // success
            () => dispatch(successAction()),

            // failure
            (error: $ResponseError) => dispatch(withApiErrorMiddleware(failureAction(error))),
          )
        ;
      };


      // Action handlers
      export const onServerStateUpdate = {
        ...onRequest,
        ...onSuccess,
        ...onFailure,
      };
    """

  'Eslint.disable':
    'prefix': 'esld'
    'body': '/* eslint-disable ${1:rule} */'

  'Eslint.enable':
    'prefix': 'esle'
    'body': '/* eslint-enable ${1:rule} */'

  'Eslint.disable-line':
    'prefix': 'esldl'
    'body': '// eslint-disable-line ${1:rule}'

  'Eslint.disable-next-line':
    'prefix': 'esldnl'
    'body': '// eslint-disable-next-line ${1:rule}'

  'PropTypes.shape':
    'prefix': 'ptsh'
    'body': """
      PropTypes.shape({
        ${1:property}: ${0}
      }),
    """

  'PropTypes.shape.isRequired':
    'prefix': 'ptshr'
    'body': """
      PropTypes.shape({
        ${1:property}: pt${0}
      }).isRequired,
    """

  'PropTypes.bool':
    'prefix': 'ptb'
    'body': 'PropTypes.bool,'

  'PropTypes.bool.isRequired':
    'prefix': 'ptbr'
    'body': 'PropTypes.bool.isRequired,'

  'PropTypes.string':
    'prefix': 'pts'
    'body': 'PropTypes.string,'

  'PropTypes.string.isRequired':
    'prefix': 'ptsr'
    'body': 'PropTypes.string.isRequired,'

  'PropTypes.number':
    'prefix': 'ptn'
    'body': 'PropTypes.number,'

  'PropTypes.number.isRequired':
    'prefix': 'ptnr'
    'body': 'PropTypes.number.isRequired,'

  'PropTypes.array':
    'prefix': 'pta'
    'body': 'PropTypes.array,'

  'PropTypes.array.isRequired':
    'prefix': 'ptar'
    'body': 'PropTypes.array.isRequired,'

  'PropTypes.object':
    'prefix': 'pto'
    'body': 'PropTypes.object,'

  'PropTypes.object.isRequired':
    'prefix': 'ptor'
    'body': 'PropTypes.object.isRequired,'

  'PropTypes.func':
    'prefix': 'ptf'
    'body': 'PropTypes.func,'

  'PropTypes.func.isRequired':
    'prefix': 'ptfr'
    'body': 'PropTypes.func.isRequired,'

  'PropTypes.instanceOf':
    'prefix': 'pti'
    'body': 'PropTypes.instanceOf(${0}),'

  'PropTypes.instanceOf.isRequired':
    'prefix': 'ptir'
    'body': 'PropTypes.instanceOf(${0}).isRequired,'

  'PropTypes.oneOf':
    'prefix': 'ptoo'
    'body': 'PropTypes.oneOf([${0}]),'

  'PropTypes.oneOf.isRequired':
    'prefix': 'ptoor'
    'body': 'PropTypes.oneOf([${0}]).isRequired,'

  'PropTypes.oneOfType':
    'prefix': 'ptoot'
    'body': 'PropTypes.oneOfType([pt${0}]),'

  'PropTypes.oneOfType.isRequired':
    'prefix': 'ptootr'
    'body': 'PropTypes.oneOfType([pt${0}]).isRequired,'

  'PropTypes.arrayOf':
    'prefix': 'ptao'
    'body': 'PropTypes.arrayOf(pt${0}),'

  'PropTypes.arrayOf.isRequired':
    'prefix': 'ptaor'
    'body': 'PropTypes.arrayOf(pt${0}).isRequired,'

  'PropTypes.any':
    'prefix': 'ptany'
    'body': 'PropTypes.any,'

  'PropTypes.any.isRequired':
    'prefix': 'ptanyr'
    'body': 'PropTypes.any.isRequired,'

  'JSDoc':
    'prefix': '@@'
    'body': """
      /**
       * @desc ${1:Method description}
       *
       */
    """
