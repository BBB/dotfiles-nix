# ======= JavaScript

'.source.js':

  'console.log':
    'prefix': 'l'
    'body': 'console.log($1);'

  'const':
    'prefix': 'c'
    'body': 'const ${1:name} = ${0:value};'

  'import':
    'prefix': 'i'
    'body': 'import ${1:module} from \'${0:location}\';'

  'require':
    'prefix': 'r'
    'body': 'const ${1:module} = require(\'${0:location}\');'

  'try/catch':
    'prefix': 'tc'
    'body': """
      try {
        ${1:expression}
      } catch (err) {
        ${0:// handle error...}
      }
    """

  'this.props':
    'prefix': 'tp'
    'body': 'this.props'

  'this.state':
    'prefix': 'ts'
    'body': 'this.state'

  'this.setState':
    'prefix': 'tss'
    'body': 'this.setState({${1}});'

  'constructor':
    'prefix': 'ctr'
    'body': """
      constructor(props, context) {
        super(props, context);

        ${1}
      }
    """

  'React.Component':
    'prefix': 'rc'
    'body': """
      import React, { PropTypes } from 'react';

      export default class ${1:Component} extends React.Component {

        static propTypes = {}

        render() {
          return (
            // jsx...
          );
        }

      }
    """

  'JSDoc':
    'prefix': '@@'
    'body': """
      /**
       * @desc ${1:Method description}
       *
       * @${0:smth}
       */
    """

  'JSDoc@param':
    'prefix': '@p'
    'body': '@param {${1:type}} ${2:name} ${0:- Note.}'

  'JSDoc@returns':
    'prefix': '@r'
    'body': '@returns {${1:type}} ${0:- Note.}'


# ======= Clojure

'.source.clojure':
  'console.log':
    'prefix': 'log'
    'body': '(.log js/console $1)'
